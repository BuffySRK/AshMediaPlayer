#pragma checksum "D:\git\AshMediaPlayer\Media.Player\Views\Media\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "cc566465197d16123b2083b549cca96f9bd2fd86"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Media_Index), @"mvc.1.0.view", @"/Views/Media/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\git\AshMediaPlayer\Media.Player\Views\_ViewImports.cshtml"
using Media.Player;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\git\AshMediaPlayer\Media.Player\Views\_ViewImports.cshtml"
using Media.Player.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"cc566465197d16123b2083b549cca96f9bd2fd86", @"/Views/Media/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d8f412b182e7aabded65d7fc3483f184a03f7f75", @"/Views/_ViewImports.cshtml")]
    public class Views_Media_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\git\AshMediaPlayer\Media.Player\Views\Media\Index.cshtml"
  
    ViewData["Title"] = "Rebmem";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<button id=\"btnSync\" class=\"media-options\" data-toggle=\"modal\" data-target=\"#uploadModal\">\r\n    <div class=\"media-ellipsis\"></div>\r\n</button>\r\n<div class=\"btn btn-primary\">\r\n    <a href=\"#\"");
            BeginWriteAttribute("class", " class=\"", 233, "\"", 241, 0);
            EndWriteAttribute();
            WriteLiteral(@" v-on:click.prevent=""getPlaylist"" style=""float:right; margin: 7px 5px 5px;"">Get playlist</a>
</div>

<div class=""media-player center-block"" style=""border-radius: 5px; margin-top: 1%;"">
    <div>
        <video ref=""mediaPlayer"" :src=""currentMediaMeta.mediaUrl"">
            Your browser does not support HTML5 video.
        </video>
    </div>
    <div style=""height: 100px;width: 100%;overflow: auto;padding: 10px;margin: 5px auto;"">
        <div v-if=""this.playlist.length > 0"">
            <a href=""#"" class=""btn btn-primary"" v-on:click.prevent=""random"" style=""float:right; margin: 5px;"">random</a>
        </div>
        <div class=""playlist"" v-for=""item in playlist"">
            <a href=""#"" v-on:click.prevent=""loadMedia(item)"">Play</a>: <br />
            {{ item.fileName }}
            <hr />
        </div>
    </div>
</div>

<div class=""scroll-left center-block"" style=""max-width:1080px;"">
    <p>Current song: {{ currentMediaMeta.fileName ? currentMediaMeta.fileName : 'None' }}</p>
</div");
            WriteLiteral(@">

<div id=""mediaPlayerControls"" class=""footer navbar-fixed-bottom"" style=""background-color:rgba(0, 0, 0, 0.5); padding:2% 0;"">
    <div class=""center-block text-center"">
        <div class=""media-buttons"">
            <div>
                <button class=""glyphicon"" v-bind:class=""isPlaying ? 'glyphicon-pause' : 'glyphicon-play'"" title=""play"" value=""play"" v-on:click.prevent=""playPause""></button>
                <button class=""stop glyphicon glyphicon-stop"" title=""stop"" v-on:click.prevent=""stop""></button>
                <button class=""rewind glyphicon glyphicon-fast-backward"" title=""rewind"" v-on:click.prevent=""rewind""></button>
                <button class=""forward glyphicon glyphicon-fast-forward"" title=""forward"" v-on:click.prevent=""forward""></button>
            </div>
        </div>
        <div class=""media-progess"">
            <div>
                <progress ref=""progressBar"" min=""0"" max=""100"" :value=""percentagePlayed"">{{ percentagePlayed }}% played</progress>
            </div>
        ");
            WriteLiteral(@"</div>
    </div>
</div>

<div id=""uploadModal"" class=""modal fade"" role=""dialog"">
    <div class=""modal-dialog"">
        <form asp-action=""UploadFile"" asp-controller=""Media"" method=""post"" enctype=""multipart/form-data"">
            <div class=""upload-input"">
                <input class=""upload-file"" type=""file"" name=""file"" />
                <button class=""upload-button"" type=""submit"">Upload</button>
            </div>
        </form>
    </div>
</div>

");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"
    <script type=""text/javascript"">
        var vm = new Vue({
            el: '#main',
            data: {
                playlist: [],
                currentMediaMeta: {},
                isPlaying: false,
                percentagePlayed: 0
            },
            methods: {
                loadMedia(mediaMeta) {
                    this.stop();

                    this.currentMediaMeta = mediaMeta;
                },
                playPause() {
                    if (!this.currentMediaMeta.fileName) {
                        return;
                    }

                    if (!this.isPlaying) {
                        this.$refs.mediaPlayer.play();
                    } else {
                        this.$refs.mediaPlayer.pause();                        
                    }

                    this.isPlaying = !this.isPlaying;
                },
                stop() {
                    var mPlayer = this.$refs.mediaPlayer;

                    mPlayer.p");
                WriteLiteral(@"ause();
                    mPlayer.currentTime = 0;

                    this.currentMediaMeta = {};
                    mPlayer.load();

                    this.isPlaying = false;
                },
                rewind() {
                    // if currenttime is less than 0 or 1 then previous track else this
                    this.$refs.mediaPlayer.currentTime = 0;
                },
                forward() {
                    if (this.currentMediaMeta == null) {
                        this.loadMedia(this.playlist[0]);
                    } else {
                        for (var i = 0; i < this.playlist.length; i++) {
                            var mm = this.playlist[i];

                            if (mm.mediaMetadataId === this.currentMediaMeta.mediaMetadataId) {
                                if (i === this.playlist.length - 1) {
                                    this.loadMedia(this.playlist[0]);
                                    break;
                         ");
                WriteLiteral(@"       } else {
                                    this.loadMedia(this.playlist[i + 1]);
                                    break;
                                }
                            }
                        }
                    }
                    // maybe play media here
                },
                getPlaylist() {
                    $.ajax({
                        url: '/media/getallmedia',
                        success: (result) => {
                            this.playlist = result;
                        }
                    })
                },
                random() {
                    var i = Math.floor((Math.random() * this.playlist.length) + 1);

                    this.loadMedia(this.playlist[i]);
                },
                updateProgressBar() {
                    var mPlayer = this.$refs.mediaPlayer;

                    if (!mPlayer.duration && !mPlayer.currentTime) {
                        this.percentagePlayed = 0;
       ");
                WriteLiteral(@"                 return;
                    }

                    this.percentagePlayed = Math.floor((100 / mPlayer.duration) * mPlayer.currentTime);
                }
            },
            mounted() {
                this.$refs.mediaPlayer.addEventListener('timeupdate', this.updateProgressBar, false);
            }
        })
    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
