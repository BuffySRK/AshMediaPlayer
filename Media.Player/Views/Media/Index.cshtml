@{
    ViewData["Title"] = "Rebmem";
}

<button id="btnSync" class="media-options" data-toggle="modal" data-target="#uploadModal">
    <div class="media-ellipsis"></div>
</button>
<div class="btn btn-primary">
    <a href="#" class="" v-on:click.prevent="getPlaylist" style="float:right; margin: 7px 5px 5px;">Get playlist</a>
</div>

<div class="media-player center-block" style="border-radius: 5px; margin-top: 1%;">
    <div>
        <video ref="mediaPlayer" :src="currentMediaMeta.mediaUrl">
            Your browser does not support HTML5 video.
        </video>
    </div>
    <div style="height: 100px;width: 100%;overflow: auto;padding: 10px;margin: 5px auto;">
        <div v-if="this.playlist.length > 0">
            <a href="#" class="btn btn-primary" v-on:click.prevent="random" style="float:right; margin: 5px;">random</a>
        </div>
        <div class="playlist" v-for="item in playlist">
            <a href="#" v-on:click.prevent="loadMedia(item)">Play</a>: <br />
            {{ item.fileName }}
            <hr />
        </div>
    </div>
</div>

<div class="scroll-left center-block" style="max-width:1080px;">
    <p>Current song: {{ currentMediaMeta.fileName ? currentMediaMeta.fileName : 'None' }}</p>
</div>

<div id="mediaPlayerControls" class="footer navbar-fixed-bottom" style="background-color:rgba(0, 0, 0, 0.5); padding:2% 0;">
    <div class="center-block text-center">
        <div class="media-buttons">
            <div>
                <button class="glyphicon" v-bind:class="isPlaying ? 'glyphicon-pause' : 'glyphicon-play'" title="play" value="play" v-on:click.prevent="playPause"></button>
                <button class="stop glyphicon glyphicon-stop" title="stop" v-on:click.prevent="stop"></button>
                <button class="rewind glyphicon glyphicon-fast-backward" title="rewind" v-on:click.prevent="rewind"></button>
                <button class="forward glyphicon glyphicon-fast-forward" title="forward" v-on:click.prevent="forward"></button>
            </div>
        </div>
        <div class="media-progess">
            <div>
                <progress ref="progressBar" min="0" max="100" :value="percentagePlayed">{{ percentagePlayed }}% played</progress>
            </div>
        </div>
    </div>
</div>

<div id="uploadModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <form asp-action="UploadFile" asp-controller="Media" method="post" enctype="multipart/form-data">
            <div class="upload-input">
                <input class="upload-file" type="file" name="file" />
                <button class="upload-button" type="submit">Upload</button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script type="text/javascript">
        var vm = new Vue({
            el: '#main',
            data: {
                playlist: [],
                currentMediaMeta: {},
                isPlaying: false,
                percentagePlayed: 0
            },
            methods: {
                loadMedia(mediaMeta) {
                    this.stop();

                    this.currentMediaMeta = mediaMeta;
                },
                playPause() {
                    if (!this.currentMediaMeta.fileName) {
                        return;
                    }

                    if (!this.isPlaying) {
                        this.$refs.mediaPlayer.play();
                    } else {
                        this.$refs.mediaPlayer.pause();                        
                    }

                    this.isPlaying = !this.isPlaying;
                },
                stop() {
                    var mPlayer = this.$refs.mediaPlayer;

                    mPlayer.pause();
                    mPlayer.currentTime = 0;

                    this.currentMediaMeta = {};
                    mPlayer.load();

                    this.isPlaying = false;
                },
                rewind() {
                    // if currenttime is less than 0 or 1 then previous track else this
                    this.$refs.mediaPlayer.currentTime = 0;
                },
                forward() {
                    if (this.currentMediaMeta == null) {
                        this.loadMedia(this.playlist[0]);
                    } else {
                        for (var i = 0; i < this.playlist.length; i++) {
                            var mm = this.playlist[i];

                            if (mm.mediaMetadataId === this.currentMediaMeta.mediaMetadataId) {
                                if (i === this.playlist.length - 1) {
                                    this.loadMedia(this.playlist[0]);
                                    break;
                                } else {
                                    this.loadMedia(this.playlist[i + 1]);
                                    break;
                                }
                            }
                        }
                    }
                    // maybe play media here
                },
                getPlaylist() {
                    $.ajax({
                        url: '/media/getallmedia',
                        success: (result) => {
                            this.playlist = result;
                        }
                    })
                },
                random() {
                    var i = Math.floor((Math.random() * this.playlist.length) + 1);

                    this.loadMedia(this.playlist[i]);
                },
                updateProgressBar() {
                    var mPlayer = this.$refs.mediaPlayer;

                    if (!mPlayer.duration && !mPlayer.currentTime) {
                        this.percentagePlayed = 0;
                        return;
                    }

                    this.percentagePlayed = Math.floor((100 / mPlayer.duration) * mPlayer.currentTime);
                }
            },
            mounted() {
                this.$refs.mediaPlayer.addEventListener('timeupdate', this.updateProgressBar, false);
            }
        })
    </script>
}
